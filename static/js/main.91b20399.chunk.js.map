{"version":3,"sources":["components/Board.js","components/Square.js","components/ResetButton.js","App.js","index.js"],"names":["Board","props","className","Square","x","o","ResetButton","onClick","window","location","reload","lines","App","useState","Array","fill","squares","setSquares","winner","setWinner","tie","setTie","useEffect","isComputerTurn","filter","square","length","linesThatAre","a","b","c","squareIndexes","squareValues","map","index","JSON","stringify","sort","playerWon","computerWon","putComputerAt","newSquares","winningLines","linesToBlock","linesToContinue","emptyIndexes","val","Math","floor","random","handleSquareClick","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.91b20399.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Board = (props) => {\n    return(\n        <div className=\"board\" {...props}>\n\n        </div>\n    );\n}\n\nexport default Board;","import React from \"react\";\n\nconst Square = (props) => {\n    return(\n        <div className={'square'} {...props}>\n            {props.x ? 'x' : (props.o ? 'o' : '')}\n        </div>\n    )\n}\n\nexport default Square","import React from \"react\";\nimport './ResetButton.css'\n\nconst ResetButton = () => {\n\n    const onClickHandler = () => {\n        return window.location.reload(false)\n    }\n\n    return(\n        <button className=\"reset\" onClick={() => onClickHandler()}>Reset</button>\n    )\n}\n\nexport default ResetButton","import './App.css';\nimport Board from './components/Board';\nimport Square from './components/Square';\nimport { useState, useEffect } from 'react';\nimport ResetButton from './components/ResetButton';\n\nconst defaultSquares = () => (new Array(9)).fill(null)\n\nconst lines = [\n  [0, 1, 2], [3,4,5], [6,7,8], //horzontal lines\n  [0,3,6], [1,4,7], [2,5,8],\n  [0,4,8], [2,4,6],\n];\n\nfunction App() {\n\n  const [squares, setSquares] = useState(defaultSquares())\n  const [winner, setWinner] = useState(null)\n  const [tie, setTie] = useState(null)\n\n  useEffect(() => {\n\n    const isComputerTurn = squares.filter(square => square !== null).length % 2 === 1;\n    const linesThatAre = (a,b,c) => {\n      return lines.filter(squareIndexes => {\n        const squareValues = squareIndexes.map(index => squares[index])\n        return JSON.stringify([a,b,c].sort()) === JSON.stringify(squareValues.sort())\n      })\n    }\n    const playerWon = linesThatAre('x', 'x',Â 'x').length > 0;\n    const computerWon = linesThatAre('o','o','o').length > 0;\n    const tie = squares.filter(square => square !== null).length===9;\n\n\n    if (tie && !playerWon && !computerWon){\n      setTie('tie')\n    }\n    if(computerWon){\n      setWinner('x')\n    }\n    if(playerWon){\n      setWinner('o')\n    }\n    const putComputerAt = index => {\n      let newSquares = squares\n      newSquares[index] = 'o';\n      setSquares([...newSquares])\n    }\n    if (isComputerTurn){\n\n      \n      const winningLines = linesThatAre('o','o', null)\n      if (winningLines.length > 0){\n          const winIndex = winningLines[0].filter(index => squares[index] === null)[0]\n          putComputerAt(winIndex)\n          return\n      }\n\n      const linesToBlock = linesThatAre('x','x', null)\n      if(linesToBlock.length > 0){\n        const blockingIndex = linesToBlock[0].filter(index => squares[index] === null)[0]\n        putComputerAt(blockingIndex)\n        return\n      }\n\n      const linesToContinue = linesThatAre('o', null, null)\n      if(linesToContinue.length>0){\n        putComputerAt(linesToContinue[0].filter(index => squares[index] === null)[0])\n        return\n      }\n      const emptyIndexes = squares\n      .map((square, index) => square === null ? index : null)\n      .filter(val => val !== null)\n      \n      const randomIndex = emptyIndexes[ Math.floor(Math.random() * emptyIndexes.length)]\n      putComputerAt(randomIndex);\n    }\n  }, [squares])\n\n  const handleSquareClick = (index) => {\n    const isPlayerTurn = squares.filter(square => square !== null).length % 2 === 0;\n    if (isPlayerTurn){\n      let newSquares = squares;\n      newSquares[index] = 'x'\n      setSquares([...newSquares]);\n    }\n\n  }\n\n\n  return (\n    <main>\n      <h1>Tic Tac Toe</h1>\n      <br/>\n      <h4>Human vs AI</h4>\n      <Board>\n        {squares.map((square,index) =>\n            <Square\n              x={square==='x'?1:0}\n              o={square==='o'?1:0}\n              onClick={() => handleSquareClick(index)} />\n        )}\n      </Board>\n      {winner && winner === 'x' && (\n        <div className=\"result-red\">\n          Computer WON!\n        </div>\n      )}\n      {winner && winner === 'o' && (\n        <div className=\"result-green\">\n          You WON!\n        </div>\n      )}\n      {tie && tie === 'tie' && (\n        <div className=\"result-blue\">\n          TIE! Click the reset button below to play again.\n        </div>\n      )}\n      <ResetButton/>\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}